module Kaminari
  module Generators
    class ConfigGenerator < Rails::Generators::Base
      def copy_config_file: () -> untyped
    end
  end
end

module Kaminari
  module Generators
    class ViewsGenerator < Rails::Generators::NamedBase
      def self.banner: () -> untyped

      def copy_or_fetch: () -> untyped

      private

      def self.themes: () -> untyped

      def download_templates: (untyped theme) -> untyped

      def copy_default_views: () -> untyped

      def view_path_for: (untyped file) -> untyped

      def views_prefix: () -> untyped

      def template_engine: () -> untyped
    end

    Template: untyped

    class Theme
      attr_accessor name: untyped

      def initialize: (untyped name, untyped templates) -> void

      def description: () -> (::String | untyped)

      def templates_for: (untyped template_engine) -> untyped
    end

    module GitHubApiHelper
      def self?.get_files_in_master: () -> untyped

      def self?.get_content_for: (untyped path) -> untyped
    end
  end
end

module Kaminari
  def self.configure: () { (untyped) -> untyped } -> untyped

  def self.config: () -> untyped

  class Config
    attr_accessor default_per_page: untyped

    attr_accessor max_per_page: untyped

    attr_accessor window: untyped

    attr_accessor outer_window: untyped

    attr_accessor left: untyped

    attr_accessor right: untyped

    attr_accessor page_method_name: untyped

    attr_accessor max_pages: untyped

    attr_accessor params_on_first_page: untyped

    attr_writer param_name: untyped

    def initialize: () -> void

    # If param_name was given as a callable object, call it when returning
    def param_name: () -> untyped
  end
end

module Kaminari
end

module Kaminari
  module Core
    VERSION: ::String
  end
end

module Kaminari
  class Engine < ::Rails::Engine
  end
end

module Kaminari
  class ZeroPerPageOperation < ZeroDivisionError
  end
end

module Kaminari
  module Helpers
    # The Kaminari::Helpers::UrlHelper module provides useful methods for
    # generating a path or url to a particlar page. A class must implement the
    # following methods:
    #
    #   * <tt>url_for</tt>: A method that generates an actual path
    #   * <tt>params</tt>: A method that returns query string parameters
    #   * <tt>request</tt>: A method that returns a Rack::Request object
    #
    # A normal Rails controller implements all the methods, which makes it
    # trivial to use this module:
    #
    # ==== Examples
    #
    #   class UsersController < ApplicationController
    #     include Kaminari::Helpers::UrlHelper
    #
    #     def index
    #      @users = User.page(1)
    #
    #      path_to_next_page(@items)
    #      # => /items?page=2
    #     end
    #   end
    #
    module UrlHelper
      # A helper that calculates the url to the next page.
      #
      # ==== Examples
      # Basic usage:
      #
      #   <%= next_page_url @items %>
      #   #-> http://www.example.org/items?page=2
      #
      # It will return `nil` if there is no next page.
      def next_page_url: (untyped scope, ?::Hash[untyped, untyped] options) -> untyped

      alias path_to_next_url next_page_url

      # A helper that calculates the url to the previous page.
      #
      # ==== Examples
      # Basic usage:
      #
      #   <%= prev_page_url @items %>
      #   #-> http://www.example.org/items
      #
      # It will return `nil` if there is no previous page.
      def prev_page_url: (untyped scope, ?::Hash[untyped, untyped] options) -> untyped

      alias previous_page_url prev_page_url

      alias url_to_prev_page prev_page_url

      alias url_to_previous_page prev_page_url

      # A helper that calculates the path to the next page.
      #
      # ==== Examples
      # Basic usage:
      #
      #   <%= path_to_next_page @items %>
      #   #-> /items?page=2
      #
      # It will return `nil` if there is no next page.
      def next_page_path: (untyped scope, ?::Hash[untyped, untyped] options) -> untyped

      alias path_to_next_page next_page_path

      # A helper that calculates the path to the previous page.
      #
      # ==== Examples
      # Basic usage:
      #
      #   <%= path_to_prev_page @items %>
      #   #-> /items
      #
      # It will return `nil` if there is no previous page.
      def prev_page_path: (untyped scope, ?::Hash[untyped, untyped] options) -> untyped

      alias previous_page_path prev_page_path

      alias path_to_previous_page prev_page_path

      alias path_to_prev_page prev_page_path
    end

    module HelperMethods
      include UrlHelper

      # A helper that renders the pagination links.
      #
      #   <%= paginate @articles %>
      #
      # ==== Options
      # * <tt>:window</tt> - The "inner window" size (4 by default).
      # * <tt>:outer_window</tt> - The "outer window" size (0 by default).
      # * <tt>:left</tt> - The "left outer window" size (0 by default).
      # * <tt>:right</tt> - The "right outer window" size (0 by default).
      # * <tt>:params</tt> - url_for parameters for the links (:controller, :action, etc.)
      # * <tt>:param_name</tt> - parameter name for page number in the links (:page by default)
      # * <tt>:remote</tt> - Ajax? (false by default)
      # * <tt>:paginator_class</tt> - Specify a custom Paginator (Kaminari::Helpers::Paginator by default)
      # * <tt>:template</tt> - Specify a custom template renderer for rendering the Paginator (receiver by default)
      # * <tt>:ANY_OTHER_VALUES</tt> - Any other hash key & values would be directly passed into each tag as :locals value.
      def paginate: (untyped scope, ?paginator_class: untyped paginator_class, ?template: untyped? template, **untyped options) -> untyped

      # A simple "Twitter like" pagination link that creates a link to the previous page.
      #
      # ==== Examples
      # Basic usage:
      #
      #   <%= link_to_previous_page @items, 'Previous Page' %>
      #
      # Ajax:
      #
      #   <%= link_to_previous_page @items, 'Previous Page', remote: true %>
      #
      # By default, it renders nothing if there are no more results on the previous page.
      # You can customize this output by passing a block.
      #
      #   <%= link_to_previous_page @users, 'Previous Page' do %>
      #     <span>At the Beginning</span>
      #   <% end %>
      def link_to_previous_page: (untyped scope, untyped name, **untyped options) { () -> untyped } -> untyped

      alias link_to_prev_page link_to_previous_page

      # A simple "Twitter like" pagination link that creates a link to the next page.
      #
      # ==== Examples
      # Basic usage:
      #
      #   <%= link_to_next_page @items, 'Next Page' %>
      #
      # Ajax:
      #
      #   <%= link_to_next_page @items, 'Next Page', remote: true %>
      #
      # By default, it renders nothing if there are no more results on the next page.
      # You can customize this output by passing a block.
      #
      #   <%= link_to_next_page @users, 'Next Page' do %>
      #     <span>No More Pages</span>
      #   <% end %>
      def link_to_next_page: (untyped scope, untyped name, **untyped options) { () -> untyped } -> untyped

      # Renders a helpful message with numbers of displayed vs. total entries.
      # Ported from mislav/will_paginate
      #
      # ==== Examples
      # Basic usage:
      #
      #   <%= page_entries_info @posts %>
      #   #-> Displaying posts 6 - 10 of 26 in total
      #
      # By default, the message will use the humanized class name of objects
      # in collection: for instance, "project types" for ProjectType models.
      # The namespace will be cutted out and only the last name will be used.
      # Override this with the <tt>:entry_name</tt> parameter:
      #
      #   <%= page_entries_info @posts, entry_name: 'item' %>
      #   #-> Displaying items 6 - 10 of 26 in total
      def page_entries_info: (untyped collection, ?entry_name: untyped? entry_name) -> untyped

      # Renders rel="next" and rel="prev" links to be used in the head.
      #
      # ==== Examples
      # Basic usage:
      #
      #   In head:
      #   <head>
      #     <title>My Website</title>
      #     <%= yield :head %>
      #   </head>
      #
      #   Somewhere in body:
      #   <% content_for :head do %>
      #     <%= rel_next_prev_link_tags @items %>
      #   <% end %>
      #
      #   #-> <link rel="next" href="/items/page/3" /><link rel="prev" href="/items/page/1" />
      #
      def rel_next_prev_link_tags: (untyped scope, ?::Hash[untyped, untyped] options) -> untyped
    end
  end
end

module Kaminari
  module Helpers
    # The main container tag
    class Paginator < Tag
      def initialize: (untyped template, ?window: untyped? window, ?outer_window: untyped outer_window, ?left: untyped left, ?right: untyped right, ?inner_window: untyped inner_window, **untyped options) -> void

      # render given block as a view template
      def render: () { () -> untyped } -> untyped

      # enumerate each page providing PageProxy object as the block parameter
      # Because of performance reason, this doesn't actually enumerate all pages but pages that are seemingly relevant to the paginator.
      # "Relevant" pages are:
      # * pages inside the left outer window plus one for showing the gap tag
      # * pages inside the inner window plus one on the left plus one on the right for showing the gap tags
      # * pages inside the right outer window plus one for showing the gap tag
      def each_relevant_page: () { (untyped) -> untyped } -> untyped

      alias each_page each_relevant_page

      private

      def relevant_pages: (untyped options) -> untyped

      public

      def page_tag: (untyped page) -> untyped

      def to_s: () -> untyped

      private

      # delegates view helper methods to @template
      def method_missing: (untyped name, *untyped args) { () -> untyped } -> untyped

      public

      # Wraps a "page number" and provides some utility methods
      class PageProxy
        include Comparable

        def initialize: (untyped options, untyped page, untyped last) -> void

        # the page number
        def number: () -> untyped

        # current page or not
        def current?: () -> untyped

        # the first page or not
        def first?: () -> untyped

        # the last page or not
        def last?: () -> untyped

        # the previous page or not
        def prev?: () -> untyped

        # the next page or not
        def next?: () -> untyped

        # relationship with the current page
        def rel: () -> untyped

        # within the left outer window or not
        def left_outer?: () -> untyped

        # within the right outer window or not
        def right_outer?: () -> untyped

        # inside the inner window or not
        def inside_window?: () -> untyped

        # Current page is an isolated gap or not
        def single_gap?: () -> untyped

        # The page number exceeds the range of pages or not
        def out_of_range?: () -> untyped

        # The last rendered tag was "truncated" or not
        def was_truncated?: () -> untyped

        # hould we display the link tag?
        def display_tag?: () -> untyped

        def to_i: () -> untyped

        def to_s: () -> untyped

        def +: (untyped other) -> untyped

        def -: (untyped other) -> untyped

        def <=>: (untyped other) -> untyped
      end
    end
  end
end

module Kaminari
  module Helpers
    PARAM_KEY_EXCEPT_LIST: untyped

    # A tag stands for an HTML tag inside the paginator.
    # Basically, a tag has its own partial template file, so every tag can be
    # rendered into String using its partial template.
    #
    # The template file should be placed in your app/views/kaminari/ directory
    # with underscored class name (besides the "Tag" class. Tag is an abstract
    # class, so _tag partial is not needed).
    #   e.g.)  PrevLink  ->  app/views/kaminari/_prev_link.html.erb
    #
    # When no matching template were found in your app, the engine's pre
    # installed template will be used.
    #   e.g.)  Paginator  ->  $GEM_HOME/kaminari-x.x.x/app/views/kaminari/_paginator.html.erb
    class Tag
      def initialize: (untyped template, ?params: ::Hash[untyped, untyped] params, ?param_name: untyped? param_name, ?theme: untyped? theme, ?views_prefix: untyped? views_prefix, **untyped options) -> void

      def to_s: (?::Hash[untyped, untyped] locals) -> untyped

      def page_url_for: (untyped page) -> untyped

      private

      def params_for: (untyped page) -> untyped

      def partial_path: () -> untyped
    end

    # Tag that contains a link
    module Link
      # target page number
      def page: () -> untyped

      # the link's href
      def url: () -> untyped

      def to_s: (?::Hash[untyped, untyped] locals) -> untyped
    end

    # A page
    class Page < Tag
      include Link

      # target page number
      def page: () -> untyped

      def to_s: (?::Hash[untyped, untyped] locals) -> untyped
    end

    # Link with page number that appears at the leftmost
    class FirstPage < Tag
      include Link

      def page: () -> 1
    end

    # Link with page number that appears at the rightmost
    class LastPage < Tag
      include Link

      def page: () -> untyped
    end

    # The "previous" page of the current page
    class PrevPage < Tag
      include Link

      def initialize: (untyped template, ?params: ::Hash[untyped, untyped] params, ?param_name: untyped? param_name, ?theme: untyped? theme, ?views_prefix: untyped? views_prefix, **untyped options) -> void

      def page: () -> untyped
    end

    # The "next" page of the current page
    class NextPage < Tag
      include Link

      def initialize: (untyped template, ?params: ::Hash[untyped, untyped] params, ?param_name: untyped? param_name, ?theme: untyped? theme, ?views_prefix: untyped? views_prefix, **untyped options) -> void

      def page: () -> untyped
    end

    # Non-link tag that stands for skipped pages...
    class Gap < Tag
    end
  end
end

module Kaminari
  # Kind of Array that can paginate
  class PaginatableArray < Array[untyped]
    include Kaminari::ConfigurationMethods::ClassMethods

    ENTRY: untyped

    # ==== Options
    # * <tt>:limit</tt> - limit
    # * <tt>:offset</tt> - offset
    # * <tt>:total_count</tt> - total_count
    # * <tt>:padding</tt> - padding
    def initialize: (?untyped original_array, ?limit: untyped? limit, ?offset: untyped? offset, ?total_count: untyped? total_count, ?padding: untyped? padding) -> void

    # Used for page_entry_info
    def entry_name: (?::Hash[untyped, untyped] options) -> untyped

    # returns another chunk of the original array
    def limit: (untyped num) -> untyped

    # total item numbers of the original array
    def total_count: () -> untyped

    # returns another chunk of the original array
    def offset: (untyped num) -> untyped
  end

  # Wrap an Array object to make it paginatable
  # ==== Options
  # * <tt>:limit</tt> - limit
  # * <tt>:offset</tt> - offset
  # * <tt>:total_count</tt> - total_count
  # * <tt>:padding</tt> - padding
  def self.paginate_array: (untyped array, ?limit: untyped? limit, ?offset: untyped? offset, ?total_count: untyped? total_count, ?padding: untyped? padding) -> untyped
end

module Kaminari
  module ConfigurationMethods
    # nodoc:
    extend ActiveSupport::Concern

    module ClassMethods
      # nodoc:
      # Overrides the default +per_page+ value per model
      #   class Article < ActiveRecord::Base
      #     paginates_per 10
      #   end
      def paginates_per: (untyped val) -> untyped

      # This model's default +per_page+ value
      # returns +default_per_page+ value unless explicitly overridden via <tt>paginates_per</tt>
      def default_per_page: () -> untyped

      # Overrides the max +per_page+ value per model
      #   class Article < ActiveRecord::Base
      #     max_paginates_per 100
      #   end
      def max_paginates_per: (untyped val) -> untyped

      # This model's max +per_page+ value
      # returns +max_per_page+ value unless explicitly overridden via <tt>max_paginates_per</tt>
      def max_per_page: () -> untyped

      # Overrides the max_pages value per model when a value is given
      #   class Article < ActiveRecord::Base
      #     max_pages 100
      #   end
      #
      # Also returns this model's max_pages value (globally configured
      # +max_pages+ value unless explicitly overridden) when no value is given
      def max_pages: (?::Symbol val) -> untyped

      def max_pages_per: (untyped val) -> untyped
    end
  end
end

module Kaminari
  module PageScopeMethods
    # Specify the <tt>per_page</tt> value for the preceding <tt>page</tt> scope
    #   Model.page(3).per(10)
    def per: (untyped num, ?max_per_page: untyped? max_per_page) -> untyped

    def max_paginates_per: (untyped new_max_per_page) -> untyped

    def padding: (untyped num) -> untyped

    # Total number of pages
    def total_pages: () -> untyped

    # Current page number
    def current_page: () -> untyped

    # Current per-page number
    def current_per_page: () -> untyped

    # Next page number in the collection
    def next_page: () -> untyped

    # Previous page number in the collection
    def prev_page: () -> untyped

    # First page of the collection?
    def first_page?: () -> untyped

    # Last page of the collection?
    def last_page?: () -> untyped

    # Out of range of the collection?
    def out_of_range?: () -> untyped
  end
end

module Kaminari
  class Railtie < ::Rails::Railtie
  end
end
