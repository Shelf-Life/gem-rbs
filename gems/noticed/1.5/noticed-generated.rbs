module Noticed
  module Generators
    class DeliveryMethodGenerator < Rails::Generators::NamedBase
      include Rails::Generators::ResourceHelpers

      def generate_notification: () -> untyped
    end
  end
end

module Noticed
  module Generators
    class ModelGenerator < Rails::Generators::NamedBase
      include Rails::Generators::ResourceHelpers

      def generate_notification: () -> untyped

      def add_noticed_model: () -> untyped

      def add_not_nullable: () -> untyped

      def done: () -> untyped

      private

      def model_path: () -> untyped

      def params_column: () -> untyped

      def current_adapter: () -> untyped
    end
  end
end

module Noticed
  module Generators
    class NotificationGenerator < Rails::Generators::NamedBase
      include Rails::Generators::ResourceHelpers

      def generate_notification: () -> untyped
    end
  end
end

module Noticed
  module DeliveryMethods
  end

  def self.notify: (recipients: untyped recipients, notification: untyped notification) -> untyped

  class ValidationError < StandardError
  end

  class ResponseUnsuccessful < StandardError
    attr_reader response: untyped

    def initialize: (untyped response) -> void
  end
end

module Noticed
  class Base
    include Translation

    extend ActiveModel::Callbacks

    # Gives notifications access to the record and recipient during delivery
    attr_accessor record: untyped

    # Gives notifications access to the record and recipient during delivery
    attr_accessor recipient: untyped

    def self.deliver_by: (untyped name, ?::Hash[untyped, untyped] options) -> untyped

    def self.inherited: (untyped base) -> untyped

    def self.with: (untyped params) -> untyped

    # Shortcut for delivering without params
    def self.deliver: (untyped recipients) -> untyped

    # Shortcut for delivering later without params
    def self.deliver_later: (untyped recipients) -> untyped

    def self.params: (*untyped names) -> untyped

    alias self.param self.params

    def initialize: (?::Hash[untyped, untyped] params) -> void

    def deliver: (untyped recipients) -> untyped

    def deliver_later: (untyped recipients) -> untyped

    def params: () -> untyped

    private

    # Runs all delivery methods for a notification
    def run_delivery: (untyped recipient, ?enqueue: bool enqueue) -> untyped

    # Actually runs an individual delivery
    def run_delivery_method: (untyped delivery_method, recipient: untyped recipient, enqueue: untyped enqueue, record: untyped record) -> untyped

    def delivery_method_for: (untyped name, untyped options) -> untyped

    def validate!: () -> untyped

    # Validates that all params are present
    def validate_params_present!: () -> untyped

    def validate_options_of_delivery_methods!: () -> untyped
  end
end

module Noticed
  class Coder
    def self.load: (untyped data) -> (nil | untyped)

    def self.dump: (untyped data) -> (nil | untyped)
  end
end

module Noticed
  module DeliveryMethods
    class ActionCable < Base
      def deliver: () -> untyped

      private

      def format: () -> untyped

      def channel: () -> untyped

      def stream: () -> untyped
    end
  end
end

module Noticed
  module DeliveryMethods
    class Base
      extend ActiveModel::Callbacks

      attr_reader notification: untyped

      attr_reader options: untyped

      attr_reader params: untyped

      attr_reader recipient: untyped

      attr_reader record: untyped

      def self.inherited: (untyped base) -> untyped

      def self.options: (*untyped names) -> untyped

      alias self.option self.options

      def self.validate!: (untyped delivery_method_options) -> untyped

      def assign_args: (untyped args) -> untyped

      def perform: (untyped args) -> (nil | untyped)

      def deliver: () -> untyped

      private

      # Helper method for making POST requests from delivery methods
      #
      # Usage:
      #   post("http://example.com", basic_auth: {user:, pass:}, headers: {}, json: {}, form: {})
      #
      def post: (untyped url, ?::Hash[untyped, untyped] args) -> untyped
    end
  end
end

module Noticed
  module DeliveryMethods
    class Database < Base
      # Must return the database record
      def deliver: () -> untyped

      def self.validate!: (untyped options) -> untyped

      private

      def association_name: () -> untyped

      def attributes: () -> untyped
    end
  end
end

module Noticed
  module DeliveryMethods
    class Email < Base
      def deliver: () -> untyped

      private

      # mailer: "UserMailer"
      # mailer: UserMailer
      # mailer: :my_method - `my_method` should return Class
      def mailer: () -> untyped

      # Method should be a symbol
      #
      # If notification responds to symbol, call that method and use return value
      # If notification does not respond to symbol, use the symbol for the mailer method
      # Otherwise, use the underscored notification class name as the mailer method
      def method: () -> untyped

      def format: () -> untyped
    end
  end
end

module Noticed
  module DeliveryMethods
    class Fcm < Base
      BASE_URI: ::String

      def deliver: () -> untyped

      def cleanup_invalid_token: (untyped device_token) -> (nil | untyped)

      def credentials: () -> untyped

      def load_json: (untyped path) -> untyped

      def project_id: () -> untyped

      def access_token: () -> untyped

      def authorizer: () -> untyped

      def format: (untyped device_token) -> untyped

      def device_tokens: () -> untyped
    end
  end
end

module Noticed
  module DeliveryMethods
    class Ios < Base
      def deliver: () -> untyped

      private

      def format_notification: (untyped apn) -> untyped

      def device_tokens: () -> untyped

      def bad_token?: (untyped response) -> untyped

      def cleanup_invalid_token: (untyped token) -> (nil | untyped)

      def connection_pool: () -> untyped

      def new_connection_pool: () -> untyped

      def connection_pool_options: () -> { auth_method: :token, cert_path: untyped, key_id: untyped, team_id: untyped }

      def bundle_identifier: () -> untyped

      def cert_path: () -> untyped

      def key_id: () -> untyped

      def team_id: () -> untyped

      def development?: () -> untyped

      def valid_cert_path?: () -> untyped

      def pool_options: () -> { size: untyped }
    end
  end
end

module Noticed
  module DeliveryMethods
    class MicrosoftTeams < Base
      def deliver: () -> untyped

      private

      def format: () -> untyped

      def url: () -> untyped
    end
  end
end

module Noticed
  module DeliveryMethods
    class Slack < Base
      def deliver: () -> untyped

      private

      def format: () -> untyped

      def url: () -> untyped
    end
  end
end

module Noticed
  module DeliveryMethods
    class Test < Base
      def self.clear!: () -> untyped

      def deliver: () -> untyped
    end
  end
end

module Noticed
  module DeliveryMethods
    class Twilio < Base
      def deliver: () -> untyped

      private

      def format: () -> untyped

      def url: () -> untyped

      def account_sid: () -> untyped

      def auth_token: () -> untyped

      def phone_number: () -> untyped

      def credentials: () -> untyped
    end
  end
end

module Noticed
  module DeliveryMethods
    class Vonage < Base
      def deliver: () -> untyped

      private

      def format: () -> untyped

      def credentials: () -> untyped
    end
  end
end

module Noticed
  class Engine < ::Rails::Engine
    include Noticed::HasNotifications
  end
end

module Noticed
  module HasNotifications
    extend ActiveSupport::Concern

    def has_noticed_notifications: (?param_name: untyped param_name, **untyped options) -> untyped

    def current_adapter: () -> untyped
  end
end

module Noticed
  module Model
    DATABASE_ERROR_CLASS_NAMES: untyped

    extend ActiveSupport::Concern

    def mark_as_read!: () -> untyped

    def mark_as_unread!: () -> untyped

    def noticed_coder: () -> untyped

    # Rehydrate the database notification into the Notification object for rendering
    def to_notification: () -> untyped

    def unread?: () -> untyped

    def read?: () -> untyped
  end
end

module Noticed
  class NotificationChannel
    def subscribed: () -> untyped

    def unsubscribed: () -> untyped

    def mark_as_read: (untyped data) -> untyped
  end
end

module Noticed
  class TextCoder
    def self.load: (untyped data) -> (nil | untyped)

    def self.dump: (untyped data) -> (nil | untyped)
  end
end

module Noticed
  module Translation
    extend ActiveSupport::Concern

    # Returns the +i18n_scope+ for the class. Overwrite if you want custom lookup.
    def i18n_scope: () -> :notifications

    def class_scope: () -> untyped

    def translate: (untyped key, **untyped options) -> untyped

    alias t translate

    def scope_translation_key: (untyped key) -> untyped
  end
end

module Noticed
  VERSION: ::String
end
