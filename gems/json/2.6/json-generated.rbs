class BigDecimal
  # Import a JSON Marshalled object.
  #
  # method used for JSON marshalling support.
  def self.json_create: (untyped object) -> untyped

  # Marshal the object to JSON.
  #
  # method used for JSON marshalling support.
  def as_json: () -> ::Hash[untyped | ::String, untyped]

  # return the JSON value
  def to_json: (*untyped args) -> untyped
end

class Complex
  # Deserializes JSON string by converting Real value <tt>r</tt>, imaginary
  # value <tt>i</tt>, to a Complex object.
  def self.json_create: (untyped object) -> untyped

  # Returns a hash, that will be turned into a JSON object and represent this
  # object.
  def as_json: () -> ::Hash[untyped | ::String, untyped]

  # Stores class name (Complex) along with real value <tt>r</tt> and imaginary value <tt>i</tt> as JSON string
  def to_json: (*untyped args) -> untyped
end

class Date
  # Deserializes JSON string by converting Julian year <tt>y</tt>, month
  # <tt>m</tt>, day <tt>d</tt> and Day of Calendar Reform <tt>sg</tt> to Date.
  def self.json_create: (untyped object) -> untyped

  alias start sg

  # Returns a hash, that will be turned into a JSON object and represent this
  # object.
  def as_json: () -> ::Hash[untyped | ::String, untyped]

  # Stores class name (Date) with Julian year <tt>y</tt>, month <tt>m</tt>, day
  # <tt>d</tt> and Day of Calendar Reform <tt>sg</tt> as JSON string
  def to_json: (*untyped args) -> untyped
end

class DateTime
  # Deserializes JSON string by converting year <tt>y</tt>, month <tt>m</tt>,
  # day <tt>d</tt>, hour <tt>H</tt>, minute <tt>M</tt>, second <tt>S</tt>,
  # offset <tt>of</tt> and Day of Calendar Reform <tt>sg</tt> to DateTime.
  def self.json_create: (untyped object) -> untyped

  alias start sg

  # Returns a hash, that will be turned into a JSON object and represent this
  # object.
  def as_json: () -> ::Hash[untyped | ::String, untyped]

  # Stores class name (DateTime) with Julian year <tt>y</tt>, month <tt>m</tt>,
  # day <tt>d</tt>, hour <tt>H</tt>, minute <tt>M</tt>, second <tt>S</tt>,
  # offset <tt>of</tt> and Day of Calendar Reform <tt>sg</tt> as JSON string
  def to_json: (*untyped args) -> untyped
end

class Exception
  # Deserializes JSON string by constructing new Exception object with message
  # <tt>m</tt> and backtrace <tt>b</tt> serialized with <tt>to_json</tt>
  def self.json_create: (untyped object) -> untyped

  # Returns a hash, that will be turned into a JSON object and represent this
  # object.
  def as_json: () -> ::Hash[untyped | ::String, untyped]

  # Stores class name (Exception) with message <tt>m</tt> and backtrace array
  # <tt>b</tt> as JSON string
  def to_json: (*untyped args) -> untyped
end

class OpenStruct
  # Deserializes JSON string by constructing new Struct object with values
  # <tt>t</tt> serialized by <tt>to_json</tt>.
  def self.json_create: (untyped object) -> untyped

  # Returns a hash, that will be turned into a JSON object and represent this
  # object.
  def as_json: () -> ::Hash[untyped | ::String, untyped]

  # Stores class name (OpenStruct) with this struct's values <tt>t</tt> as a
  # JSON string.
  def to_json: (*untyped args) -> untyped
end

class Range
  # Deserializes JSON string by constructing new Range object with arguments
  # <tt>a</tt> serialized by <tt>to_json</tt>.
  def self.json_create: (untyped object) -> untyped

  # Returns a hash, that will be turned into a JSON object and represent this
  # object.
  def as_json: () -> ::Hash[untyped | ::String, untyped | ::Array[untyped]]

  # Stores class name (Range) with JSON array of arguments <tt>a</tt> which
  # include <tt>first</tt> (integer), <tt>last</tt> (integer), and
  # <tt>exclude_end?</tt> (boolean) as JSON string.
  def to_json: (*untyped args) -> untyped
end

class Rational
  # Deserializes JSON string by converting numerator value <tt>n</tt>,
  # denominator value <tt>d</tt>, to a Rational object.
  def self.json_create: (untyped object) -> untyped

  # Returns a hash, that will be turned into a JSON object and represent this
  # object.
  def as_json: () -> ::Hash[untyped | ::String, untyped]

  # Stores class name (Rational) along with numerator value <tt>n</tt> and denominator value <tt>d</tt> as JSON string
  def to_json: (*untyped args) -> untyped
end

class Regexp
  # Deserializes JSON string by constructing new Regexp object with source
  # <tt>s</tt> (Regexp or String) and options <tt>o</tt> serialized by
  # <tt>to_json</tt>
  def self.json_create: (untyped object) -> untyped

  # Returns a hash, that will be turned into a JSON object and represent this
  # object.
  def as_json: () -> ::Hash[untyped | ::String, untyped]

  # Stores class name (Regexp) with options <tt>o</tt> and source <tt>s</tt>
  # (Regexp or String) as JSON string
  def to_json: (*untyped args) -> untyped
end

class Set
  # Import a JSON Marshalled object.
  #
  # method used for JSON marshalling support.
  def self.json_create: (untyped object) -> untyped

  # Marshal the object to JSON.
  #
  # method used for JSON marshalling support.
  def as_json: () -> ::Hash[untyped | ::String, untyped]

  # return the JSON value
  def to_json: (*untyped args) -> untyped
end

class Struct
  # Deserializes JSON string by constructing new Struct object with values
  # <tt>v</tt> serialized by <tt>to_json</tt>.
  def self.json_create: (untyped object) -> untyped

  # Returns a hash, that will be turned into a JSON object and represent this
  # object.
  def as_json: () -> ::Hash[untyped | ::String, untyped]

  # Stores class name (Struct) with Struct values <tt>v</tt> as a JSON string.
  # Only named structs are supported.
  def to_json: (*untyped args) -> untyped
end

class Symbol
  # Returns a hash, that will be turned into a JSON object and represent this
  # object.
  def as_json: () -> ::Hash[untyped | ::String, untyped]

  # Stores class name (Symbol) with String representation of Symbol as a JSON string.
  def to_json: (*untyped a) -> untyped

  # Deserializes JSON string by converting the <tt>string</tt> value stored in the object to a Symbol
  def self.json_create: (untyped o) -> untyped
end

class Time
  # Deserializes JSON string by converting time since epoch to Time
  def self.json_create: (untyped object) -> untyped

  # Returns a hash, that will be turned into a JSON object and represent this
  # object.
  def as_json: () -> ::Hash[untyped | ::String, untyped]

  # Stores class name (Time) with number of seconds since epoch and number of
  # microseconds for Time as JSON string
  def to_json: (*untyped args) -> untyped
end

module JSON
  # :call-seq:
  #   JSON[object] -> new_array or new_string
  #
  # If +object+ is a \String,
  # calls JSON.parse with +object+ and +opts+ (see method #parse):
  #   json = '[0, 1, null]'
  #   JSON[json]# => [0, 1, nil]
  #
  # Otherwise, calls JSON.generate with +object+ and +opts+ (see method #generate):
  #   ruby = [0, 1, nil]
  #   JSON[ruby] # => '[0,1,null]'
  def self.[]: (untyped object, ?::Hash[untyped, untyped] opts) -> untyped

  # Returns the JSON parser class that is used by JSON. This is either
  # JSON::Ext::Parser or JSON::Pure::Parser:
  #   JSON.parser # => JSON::Ext::Parser
  attr_reader self.parser: untyped

  def self.parser=: (untyped parser) -> untyped

  def self.deep_const_get: (untyped path) -> untyped

  def self.generator=: (untyped generator) -> untyped

  def self.create_fast_state: () -> untyped

  def self.create_pretty_state: () -> untyped

  # Returns the JSON generator module that is used by JSON. This is
  # either JSON::Ext::Generator or JSON::Pure::Generator:
  #   JSON.generator # => JSON::Ext::Generator
  attr_reader self.generator: untyped

  # Sets or Returns the JSON generator state class that is used by JSON. This is
  # either JSON::Ext::Generator::State or JSON::Pure::Generator::State:
  #   JSON.state # => JSON::Ext::Generator::State
  attr_accessor self.state: untyped

  DEFAULT_CREATE_ID: untyped

  CREATE_ID_TLS_KEY: untyped

  # Sets create identifier, which is used to decide if the _json_create_
  # hook of a class should be called; initial value is +json_class+:
  #   JSON.create_id # => 'json_class'
  def self.create_id=: (untyped new_value) -> untyped

  # Returns the current create identifier.
  # See also JSON.create_id=.
  def self.create_id: () -> untyped

  NaN: untyped

  Infinity: untyped

  MinusInfinity: untyped

  # The base exception for JSON errors.
  class JSONError < StandardError
    def self.wrap: (untyped exception) -> untyped
  end

  # This exception is raised if a parser error occurs.
  class ParserError < JSONError
  end

  # This exception is raised if the nesting of parsed data structures is too
  # deep.
  class NestingError < ParserError
  end

  # :stopdoc:
  class CircularDatastructure < NestingError
  end

  # This exception is raised if a generator or unparser error occurs.
  class GeneratorError < JSONError
  end

  UnparserError: untyped

  # This exception is raised if the required unicode support is missing on the
  # system. Usually this means that the iconv library is not installed.
  class MissingUnicodeSupport < JSONError
  end

  # :call-seq:
  #   JSON.parse(source, opts) -> object
  #
  # Returns the Ruby objects created by parsing the given +source+.
  #
  # Argument +source+ contains the \String to be parsed.
  #
  # Argument +opts+, if given, contains a \Hash of options for the parsing.
  # See {Parsing Options}[#module-JSON-label-Parsing+Options].
  #
  # ---
  #
  # When +source+ is a \JSON array, returns a Ruby \Array:
  #   source = '["foo", 1.0, true, false, null]'
  #   ruby = JSON.parse(source)
  #   ruby # => ["foo", 1.0, true, false, nil]
  #   ruby.class # => Array
  #
  # When +source+ is a \JSON object, returns a Ruby \Hash:
  #   source = '{"a": "foo", "b": 1.0, "c": true, "d": false, "e": null}'
  #   ruby = JSON.parse(source)
  #   ruby # => {"a"=>"foo", "b"=>1.0, "c"=>true, "d"=>false, "e"=>nil}
  #   ruby.class # => Hash
  #
  # For examples of parsing for all \JSON data types, see
  # {Parsing \JSON}[#module-JSON-label-Parsing+JSON].
  #
  # Parses nested JSON objects:
  #   source = <<-EOT
  #   {
  #   "name": "Dave",
  #     "age" :40,
  #     "hats": [
  #       "Cattleman's",
  #       "Panama",
  #       "Tophat"
  #     ]
  #   }
  #   EOT
  #   ruby = JSON.parse(source)
  #   ruby # => {"name"=>"Dave", "age"=>40, "hats"=>["Cattleman's", "Panama", "Tophat"]}
  #
  # ---
  #
  # Raises an exception if +source+ is not valid JSON:
  #   # Raises JSON::ParserError (783: unexpected token at ''):
  #   JSON.parse('')
  #
  def self?.parse: (untyped source, ?::Hash[untyped, untyped] opts) -> untyped

  # :call-seq:
  #   JSON.parse!(source, opts) -> object
  #
  # Calls
  #   parse(source, opts)
  # with +source+ and possibly modified +opts+.
  #
  # Differences from JSON.parse:
  # - Option +max_nesting+, if not provided, defaults to +false+,
  #   which disables checking for nesting depth.
  # - Option +allow_nan+, if not provided, defaults to +true+.
  def self?.parse!: (untyped source, ?::Hash[untyped, untyped] opts) -> untyped

  # :call-seq:
  #   JSON.load_file(path, opts={}) -> object
  #
  # Calls:
  #   parse(File.read(path), opts)
  #
  # See method #parse.
  def self?.load_file: (untyped filespec, ?::Hash[untyped, untyped] opts) -> untyped

  # :call-seq:
  #   JSON.load_file!(path, opts = {})
  #
  # Calls:
  #   JSON.parse!(File.read(path, opts))
  #
  # See method #parse!
  def self?.load_file!: (untyped filespec, ?::Hash[untyped, untyped] opts) -> untyped

  # :call-seq:
  #   JSON.generate(obj, opts = nil) -> new_string
  #
  # Returns a \String containing the generated \JSON data.
  #
  # See also JSON.fast_generate, JSON.pretty_generate.
  #
  # Argument +obj+ is the Ruby object to be converted to \JSON.
  #
  # Argument +opts+, if given, contains a \Hash of options for the generation.
  # See {Generating Options}[#module-JSON-label-Generating+Options].
  #
  # ---
  #
  # When +obj+ is an \Array, returns a \String containing a \JSON array:
  #   obj = ["foo", 1.0, true, false, nil]
  #   json = JSON.generate(obj)
  #   json # => '["foo",1.0,true,false,null]'
  #
  # When +obj+ is a \Hash, returns a \String containing a \JSON object:
  #   obj = {foo: 0, bar: 's', baz: :bat}
  #   json = JSON.generate(obj)
  #   json # => '{"foo":0,"bar":"s","baz":"bat"}'
  #
  # For examples of generating from other Ruby objects, see
  # {Generating \JSON from Other Objects}[#module-JSON-label-Generating+JSON+from+Other+Objects].
  #
  # ---
  #
  # Raises an exception if any formatting option is not a \String.
  #
  # Raises an exception if +obj+ contains circular references:
  #   a = []; b = []; a.push(b); b.push(a)
  #   # Raises JSON::NestingError (nesting of 100 is too deep):
  #   JSON.generate(a)
  #
  def self?.generate: (untyped obj, ?untyped? opts) -> untyped

  # :stopdoc:
  # I want to deprecate these later, so I'll first be silent about them, and
  # later delete them.
  alias unparse generate

  # :call-seq:
  #   JSON.fast_generate(obj, opts) -> new_string
  #
  # Arguments +obj+ and +opts+ here are the same as
  # arguments +obj+ and +opts+ in JSON.generate.
  #
  # By default, generates \JSON data without checking
  # for circular references in +obj+ (option +max_nesting+ set to +false+, disabled).
  #
  # Raises an exception if +obj+ contains circular references:
  #   a = []; b = []; a.push(b); b.push(a)
  #   # Raises SystemStackError (stack level too deep):
  #   JSON.fast_generate(a)
  def self?.fast_generate: (untyped obj, ?untyped? opts) -> untyped

  # :stopdoc:
  # I want to deprecate these later, so I'll first be silent about them, and later delete them.
  alias fast_unparse fast_generate

  # :call-seq:
  #   JSON.pretty_generate(obj, opts = nil) -> new_string
  #
  # Arguments +obj+ and +opts+ here are the same as
  # arguments +obj+ and +opts+ in JSON.generate.
  #
  # Default options are:
  #   {
  #     indent: '  ',   # Two spaces
  #     space: ' ',     # One space
  #     array_nl: "\n", # Newline
  #     object_nl: "\n" # Newline
  #   }
  #
  # Example:
  #   obj = {foo: [:bar, :baz], bat: {bam: 0, bad: 1}}
  #   json = JSON.pretty_generate(obj)
  #   puts json
  # Output:
  #   {
  #     "foo": [
  #       "bar",
  #       "baz"
  #     ],
  #     "bat": {
  #       "bam": 0,
  #       "bad": 1
  #     }
  #   }
  #
  def self?.pretty_generate: (untyped obj, ?untyped? opts) -> untyped

  # :stopdoc:
  # I want to deprecate these later, so I'll first be silent about them, and later delete them.
  alias pretty_unparse pretty_generate

  # Sets or returns default options for the JSON.load method.
  # Initially:
  #   opts = JSON.load_default_options
  #   opts # => {:max_nesting=>false, :allow_nan=>true, :allow_blank=>true, :create_additions=>true}
  attr_accessor self.load_default_options: untyped

  # :call-seq:
  #   JSON.load(source, proc = nil, options = {}) -> object
  #
  # Returns the Ruby objects created by parsing the given +source+.
  #
  # - Argument +source+ must be, or be convertible to, a \String:
  #   - If +source+ responds to instance method +to_str+,
  #     <tt>source.to_str</tt> becomes the source.
  #   - If +source+ responds to instance method +to_io+,
  #     <tt>source.to_io.read</tt> becomes the source.
  #   - If +source+ responds to instance method +read+,
  #     <tt>source.read</tt> becomes the source.
  #   - If both of the following are true, source becomes the \String <tt>'null'</tt>:
  #     - Option +allow_blank+ specifies a truthy value.
  #     - The source, as defined above, is +nil+ or the empty \String <tt>''</tt>.
  #   - Otherwise, +source+ remains the source.
  # - Argument +proc+, if given, must be a \Proc that accepts one argument.
  #   It will be called recursively with each result (depth-first order).
  #   See details below.
  #   BEWARE: This method is meant to serialise data from trusted user input,
  #   like from your own database server or clients under your control, it could
  #   be dangerous to allow untrusted users to pass JSON sources into it.
  # - Argument +opts+, if given, contains a \Hash of options for the parsing.
  #   See {Parsing Options}[#module-JSON-label-Parsing+Options].
  #   The default options can be changed via method JSON.load_default_options=.
  #
  # ---
  #
  # When no +proc+ is given, modifies +source+ as above and returns the result of
  # <tt>parse(source, opts)</tt>;  see #parse.
  #
  # Source for following examples:
  #   source = <<-EOT
  #   {
  #   "name": "Dave",
  #     "age" :40,
  #     "hats": [
  #       "Cattleman's",
  #       "Panama",
  #       "Tophat"
  #     ]
  #   }
  #   EOT
  #
  # Load a \String:
  #   ruby = JSON.load(source)
  #   ruby # => {"name"=>"Dave", "age"=>40, "hats"=>["Cattleman's", "Panama", "Tophat"]}
  #
  # Load an \IO object:
  #   require 'stringio'
  #   object = JSON.load(StringIO.new(source))
  #   object # => {"name"=>"Dave", "age"=>40, "hats"=>["Cattleman's", "Panama", "Tophat"]}
  #
  # Load a \File object:
  #   path = 't.json'
  #   File.write(path, source)
  #   File.open(path) do |file|
  #     JSON.load(file)
  #   end # => {"name"=>"Dave", "age"=>40, "hats"=>["Cattleman's", "Panama", "Tophat"]}
  #
  # ---
  #
  # When +proc+ is given:
  # - Modifies +source+ as above.
  # - Gets the +result+ from calling <tt>parse(source, opts)</tt>.
  # - Recursively calls <tt>proc(result)</tt>.
  # - Returns the final result.
  #
  # Example:
  #   require 'json'
  #
  #   # Some classes for the example.
  #   class Base
  #     def initialize(attributes)
  #       @attributes = attributes
  #     end
  #   end
  #   class User    < Base; end
  #   class Account < Base; end
  #   class Admin   < Base; end
  #   # The JSON source.
  #   json = <<-EOF
  #   {
  #     "users": [
  #         {"type": "User", "username": "jane", "email": "jane@example.com"},
  #         {"type": "User", "username": "john", "email": "john@example.com"}
  #     ],
  #     "accounts": [
  #         {"account": {"type": "Account", "paid": true, "account_id": "1234"}},
  #         {"account": {"type": "Account", "paid": false, "account_id": "1235"}}
  #     ],
  #     "admins": {"type": "Admin", "password": "0wn3d"}
  #   }
  #   EOF
  #   # Deserializer method.
  #   def deserialize_obj(obj, safe_types = %w(User Account Admin))
  #     type = obj.is_a?(Hash) && obj["type"]
  #     safe_types.include?(type) ? Object.const_get(type).new(obj) : obj
  #   end
  #   # Call to JSON.load
  #   ruby = JSON.load(json, proc {|obj|
  #     case obj
  #     when Hash
  #       obj.each {|k, v| obj[k] = deserialize_obj v }
  #     when Array
  #       obj.map! {|v| deserialize_obj v }
  #     end
  #   })
  #   pp ruby
  # Output:
  #   {"users"=>
  #      [#<User:0x00000000064c4c98
  #        @attributes=
  #          {"type"=>"User", "username"=>"jane", "email"=>"jane@example.com"}>,
  #        #<User:0x00000000064c4bd0
  #        @attributes=
  #          {"type"=>"User", "username"=>"john", "email"=>"john@example.com"}>],
  #    "accounts"=>
  #      [{"account"=>
  #          #<Account:0x00000000064c4928
  #          @attributes={"type"=>"Account", "paid"=>true, "account_id"=>"1234"}>},
  #       {"account"=>
  #          #<Account:0x00000000064c4680
  #          @attributes={"type"=>"Account", "paid"=>false, "account_id"=>"1235"}>}],
  #    "admins"=>
  #      #<Admin:0x00000000064c41f8
  #      @attributes={"type"=>"Admin", "password"=>"0wn3d"}>}
  #
  def self?.load: (untyped source, ?untyped? proc, ?::Hash[untyped, untyped] options) -> untyped

  def self?.recurse_proc: (untyped result) { () -> untyped } -> untyped

  alias restore load

  # Sets or returns the default options for the JSON.dump method.
  # Initially:
  #   opts = JSON.dump_default_options
  #   opts # => {:max_nesting=>false, :allow_nan=>true, :escape_slash=>false}
  attr_accessor self.dump_default_options: untyped

  # :call-seq:
  #   JSON.dump(obj, io = nil, limit = nil)
  #
  # Dumps +obj+ as a \JSON string, i.e. calls generate on the object and returns the result.
  #
  # The default options can be changed via method JSON.dump_default_options.
  #
  # - Argument +io+, if given, should respond to method +write+;
  #   the \JSON \String is written to +io+, and +io+ is returned.
  #   If +io+ is not given, the \JSON \String is returned.
  # - Argument +limit+, if given, is passed to JSON.generate as option +max_nesting+.
  #
  # ---
  #
  # When argument +io+ is not given, returns the \JSON \String generated from +obj+:
  #   obj = {foo: [0, 1], bar: {baz: 2, bat: 3}, bam: :bad}
  #   json = JSON.dump(obj)
  #   json # => "{\"foo\":[0,1],\"bar\":{\"baz\":2,\"bat\":3},\"bam\":\"bad\"}"
  #
  # When argument +io+ is given, writes the \JSON \String to +io+ and returns +io+:
  #   path = 't.json'
  #   File.open(path, 'w') do |file|
  #     JSON.dump(obj, file)
  #   end # => #<File:t.json (closed)>
  #   puts File.read(path)
  # Output:
  #   {"foo":[0,1],"bar":{"baz":2,"bat":3},"bam":"bad"}
  def self?.dump: (untyped obj, ?untyped? anIO, ?untyped? limit) -> untyped

  # Encodes string using String.encode.
  def self.iconv: (untyped to, untyped from, untyped string) -> untyped
end

module ::Kernel
  private

  # Outputs _objs_ to STDOUT as JSON strings in the shortest form, that is in
  # one line.
  def j: (*untyped objs) -> nil

  # Outputs _objs_ to STDOUT as JSON strings in a pretty format, with
  # indentation and over many lines.
  def jj: (*untyped objs) -> nil

  # If _object_ is string-like, parse the string and return the parsed result as
  # a Ruby data structure. Otherwise, generate a JSON text from the Ruby data
  # structure object and return it.
  #
  # The _opts_ argument is passed through to generate/parse respectively. See
  # generate and parse for their documentation.
  def JSON: (untyped object, *untyped args) -> untyped
end

# Extends any Class to include _json_creatable?_ method.
class ::Class
  # Returns true if this class can be used to create an instance
  # from a serialised JSON string. The class has to implement a class
  # method _json_create_ that expects a hash as first parameter. The hash
  # should include the required data.
  def json_creatable?: () -> untyped
end

module JSON
  # This module holds all the modules/classes that implement JSON's
  # functionality as C extensions.
  module Ext
  end

  JSON_LOADED: bool
end

module JSON
  class GenericObject < OpenStruct
    alias self.[] self.new

    def self.json_creatable?: () -> untyped

    attr_writer self.json_creatable: untyped

    def self.json_create: (untyped data) -> untyped

    def self.from_hash: (untyped object) -> untyped

    def self.load: (untyped source, ?untyped? proc, ?::Hash[untyped, untyped] opts) -> untyped

    def self.dump: (untyped obj, *untyped args) -> untyped

    def to_hash: () -> untyped

    def []: (untyped name) -> untyped

    def []=: (untyped name, untyped value) -> untyped

    def |: (untyped other) -> untyped

    def as_json: () -> untyped

    def to_json: (*untyped a) -> untyped
  end
end

# frozen_string_literal: false
module JSON
  # JSON version
  VERSION: ::String

  VERSION_ARRAY: untyped

  VERSION_MAJOR: untyped

  VERSION_MINOR: untyped

  VERSION_BUILD: untyped
end
